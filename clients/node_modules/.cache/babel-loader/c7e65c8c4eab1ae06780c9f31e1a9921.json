{"ast":null,"code":"// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import SignForm from './SignUp';\n// import api from '/api';\n// import Errors from '/NotFound';\n// import PageTypes from '../constants/pageType';\n// /**\n//  * @class\n//  * @classdesc SignIn handles the sign in component\n//  */\n// class SignIn extends Component {\n//     static propTypes = {\n//         setPage: PropTypes.func,\n//         setAuthToken: PropTypes.func\n//     }\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             email: \"\",\n//             password: \"\",\n//             error: \"\"\n//         };\n//         this.fields = [\n//             {\n//                 name: \"Email\",\n//                 key: \"email\"\n//             },\n//             {\n//                 name: \"Password\",\n//                 key: \"password\"\n//             }];\n//     }\n//     /**\n//      * @description setField will set the field for the provided argument\n//      */\n//     setField = (e) => {\n//         this.setState({ [e.target.name]: e.target.value });\n//     }\n//     /**\n//      * @description setError sets the error message\n//      */\n//     setError = (error) => {\n//         this.setState({ error })\n//     }\n//     /**\n//      * @description submitForm handles the form submission\n//      */\n//     submitForm = async (e) => {\n//         e.preventDefault();\n//         const { email, password } = this.state;\n//         const sendData = { email, password };\n//         const response = await fetch(api.base + api.handlers.sessions, {\n//             method: \"POST\",\n//             body: JSON.stringify(sendData),\n//             headers: new Headers({\n//                 \"Content-Type\": \"application/json\"\n//             })\n//         });\n//         if (response.status >= 300) {\n//             const error = await response.text();\n//             this.setError(error);\n//             return;\n//         }\n//         const authToken = response.headers.get(\"Authorization\")\n//         localStorage.setItem(\"Authorization\", authToken);\n//         this.setError(\"\");\n//         this.props.setAuthToken(authToken);\n//         const user = await response.json();\n//         this.props.setUser(user);\n//     }\n//     render() {\n//         const values = this.state;\n//         const { error } = this.state;\n//         return <>\n//             <Errors error={error} setError={this.setError} />\n//             <SignForm\n//                 setField={this.setField}\n//                 submitForm={this.submitForm}\n//                 values={values}\n//                 fields={this.fields} />\n//             <button onClick={(e) => this.props.setPage(e, PageTypes.signUp)}>Sign up instead</button>\n//             <button onClick={(e) => this.props.setPage(e, PageTypes.forgotPassword)}>Forgot password</button>\n//         </>\n//     }\n// }\n// export default SignIn;","map":{"version":3,"sources":["/Users/mac/go/src/github.com/Gottacatchemall/clients/src/containers/Login.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import SignForm from './SignUp';\n// import api from '/api';\n// import Errors from '/NotFound';\n// import PageTypes from '../constants/pageType';\n\n// /**\n//  * @class\n//  * @classdesc SignIn handles the sign in component\n//  */\n// class SignIn extends Component {\n//     static propTypes = {\n//         setPage: PropTypes.func,\n//         setAuthToken: PropTypes.func\n//     }\n\n//     constructor(props) {\n//         super(props);\n\n//         this.state = {\n//             email: \"\",\n//             password: \"\",\n//             error: \"\"\n//         };\n\n//         this.fields = [\n//             {\n//                 name: \"Email\",\n//                 key: \"email\"\n//             },\n//             {\n//                 name: \"Password\",\n//                 key: \"password\"\n//             }];\n//     }\n\n//     /**\n//      * @description setField will set the field for the provided argument\n//      */\n//     setField = (e) => {\n//         this.setState({ [e.target.name]: e.target.value });\n//     }\n\n//     /**\n//      * @description setError sets the error message\n//      */\n//     setError = (error) => {\n//         this.setState({ error })\n//     }\n\n//     /**\n//      * @description submitForm handles the form submission\n//      */\n//     submitForm = async (e) => {\n//         e.preventDefault();\n//         const { email, password } = this.state;\n//         const sendData = { email, password };\n//         const response = await fetch(api.base + api.handlers.sessions, {\n//             method: \"POST\",\n//             body: JSON.stringify(sendData),\n//             headers: new Headers({\n//                 \"Content-Type\": \"application/json\"\n//             })\n//         });\n//         if (response.status >= 300) {\n//             const error = await response.text();\n//             this.setError(error);\n//             return;\n//         }\n//         const authToken = response.headers.get(\"Authorization\")\n//         localStorage.setItem(\"Authorization\", authToken);\n//         this.setError(\"\");\n//         this.props.setAuthToken(authToken);\n//         const user = await response.json();\n//         this.props.setUser(user);\n//     }\n\n//     render() {\n//         const values = this.state;\n//         const { error } = this.state;\n//         return <>\n//             <Errors error={error} setError={this.setError} />\n//             <SignForm\n//                 setField={this.setField}\n//                 submitForm={this.submitForm}\n//                 values={values}\n//                 fields={this.fields} />\n//             <button onClick={(e) => this.props.setPage(e, PageTypes.signUp)}>Sign up instead</button>\n//             <button onClick={(e) => this.props.setPage(e, PageTypes.forgotPassword)}>Forgot password</button>\n//         </>\n//     }\n// }\n\n// export default SignIn;"]},"metadata":{},"sourceType":"module"}